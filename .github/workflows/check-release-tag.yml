name: Check Release Tag

on:
  pull_request:
    branches:
      - master
      - stable
    types:
      - opened
      - synchronize
      - reopened
      - labeled
      - unlabeled

jobs:
  check-release-tag:
    name: Verify Release Tag
    # Only run on release PRs from Version-v* or release/* branches
    if: |
      (startsWith(github.head_ref, 'Version-v') || startsWith(github.head_ref, 'release/')) &&
      (github.base_ref == 'master' || github.base_ref == 'stable')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Extract version from branch name
        id: extract-version
        env:
          BRANCH_NAME: ${{ github.head_ref }}
        run: |
          BRANCH="${BRANCH_NAME}"
          # Define semantic version pattern for consistency
          SEMVER_PATTERN='[0-9]+\.[0-9]+\.[0-9]+'

          # Validate branch name format for security
          if ! [[ "${BRANCH}" =~ ^[a-zA-Z0-9/_.-]+$ ]]; then
            echo "::error::Invalid branch name format"
            exit 1
          fi

          if [[ "${BRANCH}" =~ ^Version-v(${SEMVER_PATTERN})$ ]] || [[ "${BRANCH}" =~ ^release/(${SEMVER_PATTERN})$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
            # Additional version validation
            if ! [[ "${VERSION}" =~ ^${SEMVER_PATTERN}$ ]]; then
              echo "::error::Invalid version format extracted"
              exit 1
            fi
            echo "version=${VERSION}" >> "${GITHUB_OUTPUT}"
            echo "Expected tag: v${VERSION}"
          else
            echo "::error::Could not extract version from branch name"
            exit 1
          fi

      - name: Check if release is tagged
        id: check-tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          TAG_NAME="v${VERSION}"

          # Check if tag exists
          if git rev-parse "${TAG_NAME}" >/dev/null 2>&1; then
            TAG_SHA=$(git rev-parse "${TAG_NAME}")
            HEAD_SHA=$(git rev-parse HEAD)

            echo "Tag ${TAG_NAME} exists at ${TAG_SHA}"
            echo "Branch HEAD is at ${HEAD_SHA}"

            if [[ "${TAG_SHA}" == "${HEAD_SHA}" ]]; then
              echo "Release is properly tagged at branch HEAD"
              echo "tagged=true" >> "${GITHUB_OUTPUT}"
              echo "tag_sha=${TAG_SHA}" >> "${GITHUB_OUTPUT}"

              # Set success status
              gh api \
                --method POST \
                -H "Accept: application/vnd.github.v3+json" \
                /repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
                -f state='success' \
                -f target_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
                -f description='Release is properly tagged' \
                -f context='release/tag-check'
            else
              echo "::warning::Tag ${TAG_NAME} exists but not at branch HEAD"
              echo "::warning::Tag is at ${TAG_SHA}, HEAD is at ${HEAD_SHA}"
              echo "tagged=false" >> "${GITHUB_OUTPUT}"

              # Set warning status
              gh api \
                --method POST \
                -H "Accept: application/vnd.github.v3+json" \
                /repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
                -f state='pending' \
                -f target_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
                -f description='Tag exists but not at HEAD - please re-tag' \
                -f context='release/tag-check'
            fi
          else
            echo "::warning::Release tag ${TAG_NAME} does not exist"
            echo "::warning::Please run the 'Tag Release Branch' workflow before merging"
            echo "tagged=false" >> "${GITHUB_OUTPUT}"

            # Set pending status
            gh api \
              --method POST \
              -H "Accept: application/vnd.github.v3+json" \
              /repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
              -f state='pending' \
              -f target_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
              -f description='Release not tagged - run Tag Release Branch workflow' \
              -f context='release/tag-check'
          fi

      - name: Check for release-tagged label
        id: check-label
        env:
          LABELS: ${{ toJson(github.event.pull_request.labels.*.name) }}
        run: |
          # Use jq for proper JSON parsing
          if echo "${LABELS}" | jq -e '.[] | select(. == "release-tagged")' > /dev/null 2>&1; then
            echo "PR has 'release-tagged' label"
            echo "has_label=true" >> "${GITHUB_OUTPUT}"
          else
            echo "::warning::PR missing 'release-tagged' label"
            echo "has_label=false" >> "${GITHUB_OUTPUT}"
          fi

      - name: Comment on PR if not tagged
        if: steps.check-tag.outputs.tagged != 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = '${{ steps.extract-version.outputs.version }}';
            const comment = `## Release Tag Required

            This release PR for version **v${version}** has not been tagged yet.

            **Before merging this PR:**
            1. Run the **[Tag Release Branch](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/workflows/tag-release-branch.yml)** workflow
            2. Input version: \`${version}\`
            3. Select target branch: \`${{ github.base_ref }}\`

            This will:
            - Create the release tag at the current HEAD of the release branch
            - Update this PR with tag information
            - Add the \`release-tagged\` label

            **Why this is important:**
            - Ensures the release tag points to the exact code that was tested
            - Aligns with MetaMask Mobile's release process
            - Prevents confusion between merge commits and release commits

            Once tagged, this check will automatically pass`;

            // Check if we already commented
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Release Tag Required')
            );

            if (!botComment) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Summary
        run: |
          if [[ "${{ steps.check-tag.outputs.tagged }}" == "true" ]]; then
            {
              echo "### Release Tag Check Passed"
              echo "Release is properly tagged and ready for merge."
            } >> "${GITHUB_STEP_SUMMARY}"
          else
            {
              echo "### Release Tag Check - Action Required"
              echo "Please run the 'Tag Release Branch' workflow before merging this PR."
              echo ""
              echo "Version: v${{ steps.extract-version.outputs.version }}"
              echo "Target: ${{ github.base_ref }}"
            } >> "${GITHUB_STEP_SUMMARY}"
          fi
